{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}

{{ define "upstream" }}
	{{ if .Address }}
		{{/* If we got the containers from swarm and this container's port is published to host, use host IP:PORT */}}
		{{ if and .Container.Node.ID .Address.HostPort }}
    server {{ .Container.Node.Name }}/{{ .Container.Name }} {{ .Container.Node.Address.IP }}:{{ .Address.HostPort }} check
		{{/* If there is no swarm node or the port is not published on host, use container's IP:PORT */}}
		{{ else if .Network }}
    server {{ .Container.Name }} {{ .Network.IP }}:{{ .Address.Port }} check
		{{ end }}
	{{ else if .Network }}
		{{ if .Network.IP }}
    server {{ .Container.Name }} {{ .Network.IP }} check disabled
		{{ else }}
    server {{ .Container.Name }} 127.0.0.1 disabled
		{{ end }}
	{{ end }}
{{ end }}

global
    log 127.0.0.1 local0
    log 127.0.0.1 local1 notice
    log-send-hostname
    maxconn 4096
    pidfile /var/run/haproxy.pid
#    user haproxy
#    group haproxy
    daemon
    stats socket /var/run/haproxy.stats level admin
{{ if (exists $.Env.SSL_CERT_FILE) }}
    ssl-default-bind-options no-sslv3
    ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:AES256-GCM-SHA384:AES256-SHA256:AES256-SHA:DHE-DSS-AES128-SHA:DES-CBC3-SHA
    tune.ssl.default-dh-param 2048
{{ end }}

defaults
    mode http
    balance roundrobin
    timeout connect 3000ms
    timeout client 5m
    timeout server 5m
    option redispatch
    option httplog
    option dontlognull
    option forwardfor
    log global

{{ if contains .Env "STATS_PORT" }}
listen stats
    bind :{{ .Env.STATS_PORT }}
    stats enable
    stats hide-version
    timeout connect 10s
    stats uri /
{{ end }}

{{ $enable_ipv6 := eq (or ($.Env.ENABLE_IPV6) "") "true" }}

frontend port_80
    bind :80
    reqadd X-Forwarded-Proto:\ http
    acl is_websocket hdr(Upgrade) -i WebSocket
{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
    {{ $host := trim $host }}
    {{ $is_regexp := hasPrefix "~" $host }}
    {{ $upstream_name := when $is_regexp (sha1 $host) $host }}
    acl {{ sha1 $host }}_acl hdr(Host) -i {{ $host }}
    use_backend {{ trim $upstream_name }} if {{ sha1 $host }}_acl
{{ end }}
{{ if contains  $.Env "DEFAULT_HOST" }}
    default_backend {{ $.Env.DEFAULT_HOST }}
{{ end }}

{{ if (exists $.Env.SSL_CERT_FILE) }}
frontend port_443
    bind :443 ssl crt {{$.Env.SSL_CERT_FILE}}
    reqadd X-Forwarded-Proto:\ https
    acl is_websocket hdr(Upgrade) -i WebSocket
    {{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
        {{ $host := trim $host }}
        {{ $is_regexp := hasPrefix "~" $host }}
        {{ $upstream_name := when $is_regexp (sha1 $host) $host }}
    acl {{ sha1 $host }}_acl hdr(Host) -i {{ $host }}
    use_backend {{ trim $upstream_name }} if {{ sha1 $host }}_acl
    {{ end }}
    {{ if contains  $.Env "DEFAULT_HOST" }}
    default_backend {{ $.Env.DEFAULT_HOST }}
    {{ end }}
{{ end }}


{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

{{ $host := trim $host }}
{{ $is_regexp := hasPrefix "~" $host }}
{{ $upstream_name := when $is_regexp (sha1 $host) $host }}

backend {{ $upstream_name }}
{{ range $container := $containers }}
	{{ $addrLen := len $container.Addresses }}

	{{ range $knownNetwork := $CurrentContainer.Networks }}
		{{ range $containerNetwork := $container.Networks }}
			{{ if (and (ne $containerNetwork.Name "ingress") (or (eq $knownNetwork.Name $containerNetwork.Name) (eq $knownNetwork.Name "host"))) }}

    ## Can be connected with "{{ $containerNetwork.Name }}" network
				{{/* If only 1 port exposed, use that */}}
				{{ if eq $addrLen 1 }}
					{{ $address := index $container.Addresses 0 }}
					{{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
				{{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
				{{ else }}
					{{ $port := coalesce $container.Env.VIRTUAL_PORT "80" }}
					{{ $address := where $container.Addresses "Port" $port | first }}
					{{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
				{{ end }}
			{{ else }}
    # Cannot connect to network of this container
    # server disconnected_{{ $container.Name }} 127.0.0.1 disabled
			{{ end }}
		{{ end }}
	{{ end }}
{{ end }}

{{ end }}
